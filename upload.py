from selenium import webdriver
from selenium.webdriver.common.keys import Keys 
import os
import time
import pickle
import joblib
from sklearn.exceptions import NotFittedError
import pandas as pd
from re import search
from flask import Flask, render_template, request, flash
from werkzeug.utils import secure_filename
from flask import Markup
app = Flask(__name__)
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0

@app.route('/upload')
def upload():
   return render_template('upload.html')
	
@app.route('/uploader', methods = ['GET', 'POST'])
def uploader():
   if request.method == 'POST':
      f = request.files['file.apk']
      f.save(os.path.join("uploads_dir", secure_filename(f.name)))
      return render_template('upload.html')

@app.route('/extract',methods=['GET','POST'])
def extract():
   if request.method == 'POST':
      options = webdriver.ChromeOptions()
      options.add_argument('headless')
      options.add_argument('window-size=1920x1080')
      options.add_argument("disable-gpu")


      driver = webdriver.Chrome(r'C:/Users/adity/OneDrive/Desktop/MalwareAppDetector/webdriver/chromedriver.exe', chrome_options=options)
    
      #driver = webdriver.Chrome(r'C:/webdriver/chromedriver.exe')
     
      driver.get("https://www.sisik.eu/apk-tool")
      
      driver.maximize_window()
      driver.find_element_by_id("file-input").send_keys("C:/Users/adity/OneDrive/Desktop/MalwareAppDetector/uploads_dir/file.apk")
      time.sleep(6)
      posts = driver.find_elements_by_class_name("hljs-string")
      time.sleep(6)
        
      listofUploadedInitial = []

      for post in posts:
         listofUploadedInitial.append(post.text)
        
      substring1 = "android.permission"
      substring2 = "android.intent"

      listofUploadedFinal = []
      i=0
      while i < len(listofUploadedInitial):
         print(i)
         if search(substring1,listofUploadedInitial[i]):
            listofUploadedFinal.append(listofUploadedInitial[i])
         elif search(substring2,listofUploadedInitial[i]):
            listofUploadedFinal.append(listofUploadedInitial[i])
         i+=1
      print('List of uploaded final')
      print(listofUploadedFinal)
   #   print('below')
      
      df = pd.read_csv("C:/Users/adity/OneDrive/Desktop/MalwareAppDetector/BTP.csv")
      
      #df.drop (columns = ['Unnamed: 0', 'Unnamed: 530'], inplace = True)
      
      x = df.sum (axis = 0)
      keys = x.keys()
      values = x.values

      to_rem_1 = []
      count =0
      for i in range (530):
         if (values[i] == 1 or values[i] > 600):
            count = count + 1
            to_rem_1.append (keys[i]) 

      print(count)

      df2 = df.drop (columns = to_rem_1)
      df2 = df2.sample (frac = 1) #reshuffle
      
      df_col_list = list (df2)
     # df2["Sum"] = df2[df_col_list].sum (axis = 1)
      #df_col_list.remove ("Result")
      print('df col list')
      df_col_list.remove("Result")
      df_col_list.remove("Unnamed: 530")
      print(df_col_list)
      print(len(df_col_list))
      newlist = []
      newlist = newlist+[0]*(len(df_col_list))
      for i in range(0,len(df_col_list)):
         if(df_col_list[i] in listofUploadedFinal):
            newlist[i] = 1
         else:
            newlist[i] = 0
      newlist.append(sum(newlist))
      print('new list')
      print(newlist)
      print(len(newlist))
      model_name = joblib.load('clf_log.pkl')
      #model_name = pickle.load(open('clf_log.pkl','rb'))
      
      try:
         res = model_name.predict([newlist])
         prob = model_name.predict_proba([newlist])
      except NotFittedError as e:  
         print(repr(e))
      # print(model_name.predict(newlist))
      # var = model_name.predict(newlist)
      print("above")
      print(res[0])
      print(prob)
      print("below")
      perBenign = prob[0][1]*100
      perMalware = prob[0][0]*100


   if(res[0] == 1):
      return render_template("safe.html",value = round(perBenign,2))
   else:
      return render_template("mal.html",value = round(perMalware,2))

if __name__ == '__main__':
   app.run(debug = True)